import re
import asyncio
from typing import List, Optional, Dict, Any

from modules.utils.cleaner import clean_output_text, clean_url, search_tool
from modules.features.google_search import (
    search_google,
    summarize_google_results,
    format_google_results
)
from modules.core.logger import logger
from modules.core.openai_client import client as openai_client

# üîß Constants & Keywords
COMMON_GREETINGS = [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏î‡∏µ‡∏à‡πâ‡∏≤", "‡πÄ‡∏Æ‡∏•‡πÇ‡∏´‡∏•", "hello", "hi", "‡∏ó‡∏±‡∏Å", "‡∏Æ‡∏±‡∏•‡πÇ‡∏´‡∏•", "‡πÇ‡∏¢‡πà"
]

IMPORTANT_QUERIES = [
    r"‡∏Ç‡πà‡∏≤‡∏ß.*‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß", r"‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß.*‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", r"‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß.*‡πÑ‡∏ó‡∏¢",
    r"‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πà‡∏ß‡∏ô.*‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå", r"‡∏™‡∏£‡∏∏‡∏õ.*‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå", r"‡∏Ç‡πà‡∏≤‡∏ß.*‡∏î‡πà‡∏ß‡∏ô.*(‡πÑ‡∏ó‡∏¢|‡πÇ‡∏•‡∏Å)",
    r"(‡πÄ‡∏Å‡∏¥‡∏î|‡∏°‡∏µ).*‡πÄ‡∏´‡∏ï‡∏∏.*‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß", r"(‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô|‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®).*‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß"
]

FORCE_SEARCH_PREFIXES = ["‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", "‡∏´‡∏≤:"]

MUST_SEARCH_KEYWORDS = [
    "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô", "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", "‡∏Ç‡πà‡∏≤‡∏ß", "breaking", "real-time",
    "search", "google", "‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠", "‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£", "‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå",
    "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡∏ó‡∏µ‡πà‡∏°‡∏≤", "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏™‡∏î", "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå", "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß", "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
    "‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "‡∏ú‡∏•‡∏ö‡∏≠‡∏•", "‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å", "‡∏´‡∏∏‡πâ‡∏ô", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á", "update"
]

# ‚úÖ Decision Functions
def is_greeting(text: str) -> bool:
    return any(greet in text.lower() for greet in COMMON_GREETINGS)

def is_question(text: str) -> bool:
    QUESTION_HINTS = ["‡∏Ñ‡∏∑‡∏≠", "‡∏≠‡∏∞‡πÑ‡∏£", "‡πÉ‡∏Ñ‡∏£", "‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£", "‡∏ó‡∏≥‡πÑ‡∏°", "‡∏´‡∏£‡∏≠", "?"]
    return any(hint in text for hint in QUESTION_HINTS) or text.strip().endswith("?")

def matches_important_query(text: str) -> bool:
    return any(re.search(pattern, text) for pattern in IMPORTANT_QUERIES)

def remove_force_prefix(text: str) -> str:
    for prefix in FORCE_SEARCH_PREFIXES:
        if text.lower().startswith(prefix):
            return text[len(prefix):].strip()
    return text

def is_about_bot(text: str) -> bool:
    patterns = [
        r"\b(‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°|bot|‡∏ö‡∏≠‡∏ó|gpt|‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏≤‡∏°)\b",
        r"‡∏ä‡∏∑‡πà‡∏≠.*(‡∏ö‡∏≠‡∏ó|‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°)",
        r"(‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°|‡∏ö‡∏≠‡∏ó).*(‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡∏ï‡∏≠‡∏ö|‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ|‡πÄ‡∏Å‡∏¥‡∏î|‡∏™‡∏£‡πâ‡∏≤‡∏á|‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï|‡∏û‡∏π‡∏î|‡∏£‡∏π‡πâ|‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å|‡∏Ñ‡∏∑‡∏≠)",
        r"(‡πÉ‡∏Ñ‡∏£.*(‡∏™‡∏£‡πâ‡∏≤‡∏á|‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô|‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠))",
    ]
    text = text.lower()
    return any(re.search(p, text) for p in patterns)

async def needs_web_search(text: str) -> bool:
    text = text.lower().strip()

    if is_greeting(text) or is_about_bot(text):
        return False

    if any(text.startswith(prefix) for prefix in FORCE_SEARCH_PREFIXES):
        return True

    if matches_important_query(text):
        return True

    if any(keyword in text for keyword in MUST_SEARCH_KEYWORDS):
        return True

    if len(text.split()) <= 2 and not is_question(text):
        return False

    return is_question(text)

async def get_openai_response(
    messages: List[dict],
    settings,
    model="gpt-4o-mini",
    use_web_fallback=False,
    fallback_model="gpt-4o-mini-search-preview",
    max_retries=3,
    delay=5
) -> Optional[str]:
    fallback_phrases = [
        "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö", "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©", "‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", "‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î",
        "‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô", "‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏π‡πâ‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î",
        "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ",
        "‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", "‡∏≠‡∏≤‡∏à‡∏à‡∏∞", "‡∏ô‡πà‡∏≤‡∏à‡∏∞", "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
        "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", "‡πÄ‡∏Å‡∏£‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
        "‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
        "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÑ‡∏î‡πâ",
        "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏ß‡∏•‡∏ä‡∏ô",
        "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", "‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏∏‡∏ô‡∏¥‡∏¢‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡πà‡∏≤‡∏ß", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î", 
        "‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ ‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
    ]

    for attempt in range(max_retries):
        try:
            logger.info(f"üîÅ Attempt {attempt + 1}: using model {model}")
            response = await openai_client.chat.completions.create(
                model=model,
                messages=messages[-3:],  # use last 3 messages only
                max_tokens=600,
                temperature=0.6,
                top_p=1.0,
                frequency_penalty=0.2,
                presence_penalty=0.3,
            )

            content = response.choices[0].message.content.strip()
            response_text = content.lower()

    if use_web_fallback and any(phrase in response_text for phrase in fallback_phrases):
        query = messages[-1]["content"]
        
        if any(botname in query.lower() for botname in ["‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°", "‡∏û‡∏£‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°", "‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏≤‡∏°", "gpt", "‡∏ö‡∏≠‡∏ó"]):
            logger.info("üß† ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ‡πÑ‡∏°‡πà fallback ‡πÑ‡∏õ‡∏´‡∏≤ Google")
        else:
            logger.info(f"üîç GPT ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô Google ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: {query}")
            raw_results = await search_google(query, settings)
            summarized_text = summarize_google_results(raw_results)
    
            messages.append({
                "role": "function",
                "name": "search_google",
                "content": summarized_text
            })
    
            logger.info(f"üîÅ Fallback with model {fallback_model}")
            second_response = await openai_client.chat.completions.create(
                model=fallback_model,
                messages=messages[-5:],
                **({"web_search_options": {}} if fallback_model.endswith("-search-preview") else {}),
                max_tokens=700
            )
    
            content = second_response.choices[0].message.content.strip()
            logger.info("üß† GPT ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Google")

            else:
                logger.info("üß† GPT ‡∏ï‡∏≠‡∏ö‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Google")


            content = re.sub(r"\[([^\]]+)\]\((https?://[^\)]+)\)", r"\1 <\2>", content)
            content = re.sub(r"üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:\s*", "", content)
            content = re.sub(r"(https?://\S+)", r"<\1>", content)
            
            return clean_output_text(content)


        except Exception as e:
            logger.error(f"‚ùå get_openai_response error: {e}")
            await asyncio.sleep(delay)
    
    logger.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenAI API")
    return "‚ö†Ô∏è ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏á‡∏á‡πÄ‡∏•‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏à‡πâ‡∏≤"
