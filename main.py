# üîπ Standard Library
import os
import json
import asyncio
import random
import re
from datetime import datetime
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor

# üîπ Third-Party Packages
import asyncpg
import discord
import pytz
import openai
import httpx
import requests
import redis.asyncio as redis
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
from pydantic import Field
from pydantic_settings import BaseSettings

# üîπ Local Modules
from modules.features.oil_price import get_oil_price_today
from modules.features.gold_price import get_gold_price_today
from modules.features.lottery_checker import get_lottery_results
from modules.features.exchange_rate import get_exchange_rate
from modules.features.weather_forecast import get_weather
from modules.features.daily_news import get_daily_news
from modules.features.global_news import get_global_news
from modules.features.google_search import search_google, search_image
from modules.tarot.tarot_reading import draw_cards_and_interpret_by_topic
from modules.nlp.message_matcher import match_topic
from modules.memory.chat_memory import store_chat, build_chat_context, get_chat_history
from modules.utils.cleaner import clean_output_text, search_tool, format_response_markdown, clean_url
from modules.utils.thai_to_eng_city import convert_thai_to_english_city
from modules.utils.thai_datetime import get_thai_datetime_now, format_thai_datetime
from modules.utils.query_utils import (
    is_greeting, is_about_bot, is_question,
    matches_important_query, remove_force_prefix,
    needs_web_search
)
from modules.core.logger import logger
from modules.core.openai_client import client as openai_client
from modules.utils.query_utils import get_openai_response
from modules.personality.tone_manager import detect_tone

# ‚úÖ Load environment variables
load_dotenv()

class Settings(BaseSettings):
    DISCORD_TOKEN: str = Field(..., env='DISCORD_TOKEN')
    OPENAI_API_KEY: str = Field(..., env='OPENAI_API_KEY')
    DATABASE_URL: Optional[str] = Field(None, env='DATABASE_URL')
    PG_USER: Optional[str] = Field(None, env='PGUSER')
    PG_PW: Optional[str] = Field(None, env='PGPASSWORD')
    PG_HOST: Optional[str] = Field(None, env='PGHOST')
    PG_PORT: str = Field('5432', env='PGPORT')
    PG_DB: Optional[str] = Field(None, env='PGDATABASE')
    GOOGLE_API_KEY: Optional[str] = Field(None, env='GOOGLE_API_KEY')
    GOOGLE_CSE_ID: Optional[str] = Field(None, env='GOOGLE_CSE_ID')
    REDIS_URL: str = Field('redis://localhost', env='REDIS_URL')

settings = Settings()

CHANNEL_ID = 1350812185001066538
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="$", intents=intents)
openai.api_key = settings.OPENAI_API_KEY
redis_instance = None

async def setup_connection():
    global redis_instance
    for _ in range(3):
        try:
            redis_instance = await redis.from_url(settings.REDIS_URL, decode_responses=True)
            await redis_instance.ping()
            logger.info("‚úÖ Redis connected")
            break
        except Exception as e:
            logger.warning(f"üîÅ Redis retry failed: {e}")
            await asyncio.sleep(2)
    else:
        logger.error("‚ùå Redis connection failed")
        redis_instance = None

    try:
        if settings.DATABASE_URL:
            bot.pool = await asyncpg.create_pool(settings.DATABASE_URL)
        else:
            bot.pool = await asyncpg.create_pool(
                user=settings.PG_USER,
                password=settings.PG_PW,
                host=settings.PG_HOST,
                port=settings.PG_PORT,
                database=settings.PG_DB
            )
        logger.info("‚úÖ PostgreSQL connected")
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection failed: {e}")
        bot.pool = None

async def create_table():
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                CREATE TABLE IF NOT EXISTS context (
                    id BIGINT PRIMARY KEY,
                    chatcontext TEXT[] DEFAULT ARRAY[]::TEXT[]
                )
            """)
            logger.info("‚úÖ context table ensured")
    except Exception as e:
        logger.error(f"‚ùå create_table error: {e}")

async def process_message(user_id: int, text: str) -> str:
    style = await redis_instance.get(f"style:{user_id}")

    if not style or style in ["auto", "multi"]:
        style = detect_tone(text)

    if not await redis_instance.get(f"style:{user_id}"):
        await redis_instance.set(f"style:{user_id}", style, ex=604800)

    base_prompt = (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏û‡∏£‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°' ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏à‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡πÑ‡∏ó‡∏¢ "
        "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏π‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏ô "
        "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô AI ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ\n\n"
        "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏Ñ‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á "
        "‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏†‡∏≤‡∏©‡∏≤\n\n"
    )

    styles = {
        "formal": "‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏Ñ‡∏ô‡∏ü‡∏±‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏≤‡∏ö ‡πÑ‡∏°‡πà‡πÅ‡∏ã‡∏∞",
        "troll": "‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏™‡∏≤‡∏¢‡∏Å‡∏ß‡∏ô ‡∏°‡∏∏‡∏Å‡∏°‡∏≤‡πÄ‡∏ï‡πá‡∏° ‡∏Æ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô ‡πÜ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î",
        "neutral": "‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏ó‡∏¢‡∏Ñ‡∏ô‡∏ô‡∏∂‡∏á ‡∏Ñ‡∏∏‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏ö‡∏≤‡∏¢ ‡πÜ ‡∏°‡∏µ‡∏°‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡πá‡∏ß ‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô",
    }

    return base_prompt + styles.get(style, styles["neutral"])

@bot.event
async def on_ready():
    await setup_connection()
    await create_table()
    await bot.tree.sync()
    logger.info(f"üöÄ {bot.user} is ready!")

async def send_long_reply(message: discord.Message, content: str) -> None:
    chunks = [clean_output_text(content)[i:i + 2000] for i in range(0, len(content), 2000)]
    if chunks:
        await message.reply(chunks[0])
        for chunk in chunks[1:]:
            await message.channel.send(chunk)

async def smart_reply(message: discord.Message, content: str):
    content = clean_output_text(content)
    
    if len(content) > 2000:
        await send_long_reply(message, content)
        return

    try:
        await message.reply(content)
    except discord.HTTPException as e:
        if "Unknown message" in str(e) or e.code == 50035:
            # ‡∏ñ‡πâ‡∏≤ reply ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ message ‡∏´‡∏≤‡∏¢ ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô send()
            await message.channel.send(content)
        else:
            raise  # ‡∏ñ‡πâ‡∏≤ error ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ throw ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot or message.channel.id != CHANNEL_ID:
        return

    text = message.content.strip()
    lowered = text.lower()

    topic = match_topic(lowered)
    if topic == "image":
        query = re.sub(r"^(‡∏î‡∏π‡∏£‡∏π‡∏õ|‡∏Ñ‡πâ‡∏ô‡∏£‡∏π‡∏õ|‡∏´‡∏≤‡∏£‡∏π‡∏õ|‡∏Ç‡∏≠‡∏£‡∏π‡∏õ)[:,\s]*", "", lowered)
        if not query:
            prev_query = await redis_instance.get(f"last_image_query:{message.author.id}")
            if prev_query:
                query = prev_query
        if query:
            await redis_instance.set(f"last_image_query:{message.author.id}", query, ex=300)
            image_url = await search_image(query, settings)
            image_url = clean_url(image_url)
            return await smart_reply(message, image_url or f"üòø ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ‚Äú{query}‚Äù")
        return await smart_reply(message, "üì∑ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ `‡∏î‡∏π‡∏£‡∏π‡∏õ: ‡πÅ‡∏°‡∏ß` ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏™‡∏¥")

    elif topic == "lotto":
        return await smart_reply(message, await get_lottery_results())

    elif topic == "exchange":
        return await smart_reply(message, await get_exchange_rate())

    elif topic == "gold":
        return await smart_reply(message, await get_gold_price_today())

    elif topic == "oil":
        return await smart_reply(message, await get_oil_price_today())

    elif topic == "news":
        return await smart_reply(message, await get_daily_news())

    elif topic == "global_news":
        return await smart_reply(message, await get_global_news())

    elif topic == "weather":
        match = re.search(r"(‡∏ó‡∏µ‡πà|‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î|‡πÄ‡∏°‡∏∑‡∏≠‡∏á)\s+(.+)", lowered)
        city = match.group(2).strip() if match else None
        if city:
            eng_city = convert_thai_to_english_city(city)
            return await smart_reply(message, await get_weather(eng_city))
        return await smart_reply(message, "üìç ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ `‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà`")

    elif topic == "tarot":
        return await smart_reply(message, "üîÆ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ? ‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å, ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô, ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")

    elif lowered in ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"]:
        return await smart_reply(message, await draw_cards_and_interpret_by_topic(lowered))

    elif any(kw in lowered for kw in ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£", "‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]):
        return await smart_reply(message, f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ {get_thai_datetime_now()}")

    elif any(kw in lowered for kw in ["‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á"]):
        return await smart_reply(message, f"üïí ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ {get_thai_datetime_now()}")

    # üë§ Personality
    model = "gpt-4o-mini"
    system_prompt = await process_message(message.author.id, text)

    timezone = await redis_instance.get(f"timezone:{message.author.id}") or "Asia/Bangkok"
    now = datetime.now(pytz.timezone(timezone))
    system_prompt += f"""

‚è∞ timezone: {timezone}
üïí {format_thai_datetime(now)}
"""

    messages = await build_chat_context(
        redis_instance,
        message.author.id,
        text,
        system_prompt=system_prompt,
        limit=3
    )

    async with message.channel.typing():
        notify = None

        reply = await get_openai_response(
            messages,
            settings=settings,
            model=model,
            use_web_fallback=True,
            fallback_model="gpt-4o-mini-search-preview"
        )

        if not reply:
            logger.warning("‚ùå GPT ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢")
            return await smart_reply(message, "‚ö†Ô∏è ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏á‡∏á‡πÄ‡∏•‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏à‡πâ‡∏≤")

        if "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google..." in reply:
            notify = await message.channel.send("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google...")

        if notify:
            await notify.delete()

        reply_content = clean_url(clean_output_text(format_response_markdown(reply)))
        await smart_reply(message, reply_content)
        await store_chat(redis_instance, message.author.id, {
            "question": text,
            "response": reply_content
        })

# ‚úÖ Entry point
async def main():
    await setup_connection()
    if bot.pool and redis_instance:
        await bot.start(settings.DISCORD_TOKEN)
    else:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis ‡∏´‡∏£‡∏∑‡∏≠ DB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if __name__ == "__main__":
    asyncio.run(main())
